<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.mapper.CardAddInfoMapper">
		 
	
	<select id="cardAddInfoPageList" resultType="CardAddInfo" parameterType="CardAddInfo">	
	     select 
			t.card_id as cardId,
			t.card_name as cardName,
			t.card_info as cardInfo,
			t.card_type as cardType,
			t.card_pic_url as cardPicUrl,
			t.card_pic_name as cardPicName,
			t.card_num as cardNum,
			t.type_id as typeId,
			a.type_name as typeName,
			t.card_for_sex as cardForSex,
			t.card_for_age as cardForAge,
			t.card_for_order as cardForOrder,
			t.card_flag as cardFlag,
			t.card_bm_no as cardBmNo
		from 
		bank_card_info t 
		left join bank_card_type a on a.type_id=t.type_id
	    where t.card_flag='2'  
	    <if test="cardName!=null and cardName!=''">
			  and  t.card_name like "%"#{cardName}"%" 
		</if>
		 order by  cardId desc
	</select>
	
	<select id="selectBankCardLikeById" resultType="CardAddInfo" parameterType="String">	
	    select 
			c.card_id as cardId,
            c.card_for_like as cardForLike
		from 
		bank_card_info t 
		left join bank_card_type a on a.type_id=t.type_id
		left join bank_card_like c on t.card_id=c.card_id
	    where t.card_flag='2' and c.card_id=#{cardId,jdbcType=VARCHAR}
	    
	</select>
	<select id="listCardOfType" resultType="com.app.entity.BankCardType">
	   select 
		t.type_id as typeId,
		t.type_num as typeNum,
		t.type_name as typeName
	  from bank_card_type t 
	  order by t.type_Id
	</select>
	<select id="listCardAddType" resultType="com.app.entity.BankCodeInfo">
	   select 
		  t.value as value,
		  t.content as content
		from bank_code_info t
		where t.code_type_id='ADD_CARD_TYPE'
		 order by t.value
	</select>
	<select id="listCardForAge" resultType="com.app.entity.BankCodeInfo">
	   select 
		  t.value as value,
		  t.content as content
		from bank_code_info t
		where t.code_type_id='AGE_LEVEL'
		 order by t.value
	</select>
	<select id="listCardForLike" resultType="com.app.entity.BankCodeInfo">
	   select 
		  t.value as value,
		  t.content as content
		from bank_code_info t
		where t.code_type_id='ADD_CARD_LIKE'
		 order by t.value
	</select>
	<!-- 新增加办卡 -->
	<insert id="insertCardAddInfo" parameterType="CardAddInfo">
	  insert into bank_card_info (
	  	card_id,
		 CARD_NUM,
		 card_name,
		 card_info,
		 card_pic_url,
		 CARD_PIC_NAME,
		 TYPE_ID,
		 CARD_FOR_SEX,
		 CARD_FOR_AGE,
		 CARD_FOR_ORDER,
		 CARD_FLAG,
		 CARD_BM_NO
		 )
	  values(
	  	  #{cardId},
		  #{cardNum,jdbcType=VARCHAR},
		  #{cardName,jdbcType=VARCHAR},
		  #{cardInfo,jdbcType=VARCHAR},
		  #{cardPicUrl,jdbcType=VARCHAR},
		  #{cardPicName,jdbcType=VARCHAR},
		  #{typeId,jdbcType=VARCHAR},
		  #{cardForSex,jdbcType=VARCHAR},
		  #{cardForAge,jdbcType=VARCHAR},
		  #{cardForOrder,jdbcType=VARCHAR},
		  #{cardFlag,jdbcType=VARCHAR},
		  #{cardBmNo,jdbcType=VARCHAR}
		  )
     
	  </insert>
	 <insert id="insertBankCardLike" parameterType="java.util.HashMap">
	     INSERT INTO bank_card_like (CARD_ID,CARD_FOR_LIKE)
	     values(#{cardId,jdbcType=VARCHAR},#{cardForLike,jdbcType=VARCHAR})
	 </insert>
	
	 <delete id="deleteCodeAddInfo">
	     delete from bank_card_info 
		<where>
			card_id  in
			<foreach collection="array" item="item" index="index" open="("
				separator="," close=")">#{item}</foreach>
		</where>
	 
	 </delete>
	  <delete id="deleteBankCardLike">
	     delete from bank_card_like  
		 <where>
			card_id  in
			<foreach collection="array" item="item" index="index" open="("
				separator="," close=")">#{item}</foreach>
		</where>
	 </delete>
	 	
	 <select id="getBankCardInfoById" parameterType="java.lang.String" resultType="CardAddInfo">
	    select 
			t.card_id as cardId,
			t.card_name as cardName,
			t.card_info as cardInfo,
			t.card_type as cardType,
			t.card_pic_url as cardPicUrl,
			t.card_pic_name as cardPicName,
			t.card_num as cardNum,
			t.type_id as typeId,
			a.type_name as typeName,
			t.card_for_sex as cardForSex,
			t.card_for_age as cardForAge,
			t.card_for_order as cardForOrder,
			t.card_flag as cardFlag,
			t.card_bm_no as cardBmNo
		from 
		bank_card_info t 
		left join bank_card_type a on a.type_id=t.type_id
	    where t.card_flag='2' and t.card_id=#{cardId,jdbcType=VARCHAR}
	     
	</select>
	<update id="updateBankCardInfoById" parameterType="CardAddInfo">
	   UPDATE bank_card_info SET
		 card_name=#{cardName,jdbcType=VARCHAR},
		 card_info=#{cardInfo,jdbcType=VARCHAR},
		 card_pic_url=#{cardPicUrl,jdbcType=VARCHAR},
		 CARD_PIC_NAME=#{cardPicName,jdbcType=VARCHAR},
		 TYPE_ID=#{typeId,jdbcType=VARCHAR},
		 CARD_FOR_SEX=#{cardForSex,jdbcType=VARCHAR},
		 CARD_FOR_AGE=#{cardForAge,jdbcType=VARCHAR},
		 CARD_FOR_ORDER=#{cardForOrder,jdbcType=VARCHAR},
		 CARD_FLAG=#{cardFlag,jdbcType=VARCHAR},
		 CARD_BM_NO=#{cardBmNo,jdbcType=VARCHAR},
		  CARD_NUM=#{cardNum,jdbcType=VARCHAR}
	   where card_id=#{cardId,jdbcType=VARCHAR}
	</update>
	<!-- 查询图片名称 -->
	<select id="selectBankCardAddInfoPics" resultType="String">
	  		select t.card_pic_name as cardPicName from bank_card_info t 
	   <where>
			t.card_id in
			<foreach collection="array" item="item" index="index" open="("
				separator="," close=")">#{item}</foreach>
		</where> 
	</select>
	
	<select id="getCardId" resultType="int" >
		select  max(card_id) from bank_card_info
	</select>
	
	<!-- 查询卡产品编号是否唯一 -->
	<select id="selectBankCardAddInfoByNum" resultType="int" parameterType="java.lang.String">
	   select count(1) from bank_card_info a where  a.CARD_NUM=#{cardNum,jdbcType=VARCHAR} and a.card_flag='2'
	</select>
	<!--查询cardForLikes-->
	<!-- <select id="getCardFOrLikesByCardId" parameterType="String" resultMap="List">
		select CARD_FOR_LIKE from bank_card_like where card_id = #{cardId}
	</select> -->
	 <delete id="deleteBankCardLikes" parameterType="String" >
	 	delete  from bank_card_like where card_id = #{cardId}
	 </delete>
	 
	 <delete id="deleteBankCardInfo" parameterType="String">
	 	delete from bank_card_info where card_id = #{cardId}
	 </delete>
	 
</mapper>