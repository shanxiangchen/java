<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.mapper.UserMapper">
		
	<resultMap type="User" id="userAndRoleResultMap">
		<id column="user_id" property="userId"/>
		<result column="loginname" property="loginname"/>
		<result column="username" property="username"/>
		<result column="password" property="password"/>
		<result column="rights" property="rights"/>
		<result column="status" property="status"/>
		<result column="last_login" property="lastLogin"/>
		<result column="manage_no" property="manageno"/>
		<result column="role_id" property="roleId"/>
		<result column="manage_describe" property="managedescribe"/>
		<result column="PERMISSIONS_CATEGORY" property="permissionsCategory"/>
		<result column="CREATE_ID" property="createId"/>
		<association property="role" column="role_id" javaType="Role">
			<id column="role_id" property="roleId"/>
			<result column="role_name" property="roleName"/>
			<result column="role_rights" property="rights"/>
			<result column="PERMISSIONS_CATEGORY" property="permissionsCategory"/>
		</association>
	</resultMap>
	
	<resultMap type="User" id="userResultMap">
		<id column="user_id" property="userId"/>
		<result column="loginname" property="loginname"/>
		<result column="username" property="username"/>
		<result column="password" property="password"/>
		<result column="rights" property="rights"/>
		<result column="status" property="status"/>
		<result column="role_id" property="roleId"/>
		<result column="manage_no" property="manageno"/>
		<result column="manage_describe" property="managedescribe"/>
		<result column="PERMISSIONS_CATEGORY" property="permissionsCategory"/>
	</resultMap>
	
	<select id="listAllUser" resultMap="userAndRoleResultMap">
		select u.user_id,u.username,u.loginname,u.password,u.status,u.last_login,
		u.manage_no,u.manage_describe,r.role_id,r.role_name from bank_manage u 
		left join bank_role_manage r on u.role_id=r.role_id 
		 <!-- where u.status=0   -->
	</select>
	<select id="userSel" resultMap="userAndRoleResultMap" parameterType="int">
		select u.user_id,u.username,u.loginname,u.password,u.status,u.last_login,
			u.manage_no,u.manage_describe,r.role_id,r.role_name
		from bank_manage u, bank_role_manage r where u.CREATE_ID=#{userId} and u.role_id=r.role_id 
	</select>
	<select id="listPageUser" parameterType="User" resultMap="userAndRoleResultMap">
		select
		u.user_id,u.username,u.loginname,u.password,status,r.role_id,r.role_name,u.last_login,
		u.manage_no,u.manage_describe from bank_manage u
		left join bank_role_manage r on u.role_id=r.role_id
		where 1=1
		<if test="loginname!=null and loginname!=''">
			and u.loginname like concat('%',#{loginname},'%') 
		</if>
		<if test="roleId!='1'.toString()">
			<!-- and r.role_two=#{roleId} or u.user_id=#{userId} -->
			and r.role_id in
			<foreach item="item" index="index" collection="roleIdList"
			open="(" separator="," close=")">
				'${item}'
			</foreach>
		</if>
		<if test="username!=null and username!=''">
			and u.username like concat('%',#{username},'%')  
		</if>  
	</select>
	
	
		 <select id="userSela" resultMap="userAndRoleResultMap" parameterType="User">
			select u.user_id,u.username,u.loginname,u.password,status,r.role_id,r.role_name,u.last_login,
		u.manage_no,u.manage_describe from bank_manage u
		left join bank_role_manage r on u.role_id=r.role_id
		where 1=1
			<if test="loginname!=null and loginname!=''">
			and u.loginname like concat('%',#{loginname},'%') 
			</if>
			<if test="username!=null and username!=''">
				or u.loginname like concat('%',#{loginname},'%') 
			</if> 
		</select>
	
	
	
	
	<select id="listUserByUser" parameterType="User" resultMap="userAndRoleResultMap">
		select
		u.user_id,u.username,u.loginname,u.password,status,r.role_id,r.role_name,u.last_login,
		u.manage_no,u.manage_describe from bank_manage u
		left join bank_role_manage r on u.role_id=r.role_id
		where 1=1
		<if test="roleId!='1'.toString()">
			and r.role_id in
			<foreach item="item" index="index" collection="roleIdList"
			open="(" separator="," close=")">
				'${item}'
			</foreach>
		</if>
		<if test="username!=null and username!=''">
			and u.username like "%"#{username}"%"
		</if>
		<if test="loginname != null and loginname != ''">
			and u.loginname like "%"#{loginname}"%"
		</if>
	</select>
	
	 
	<select id="getUserInfo" parameterType="User" resultMap="userResultMap">
		select * from bank_manage where 1=1
		<if test="loginname!=null and password!=null">
		and loginname = #{loginname} and password=#{password}
		</if>
		<if test="userId!=null and userId>0">
		and user_id = #{userId}
		</if>
	</select>
	
	<select id="getUserById" parameterType="Integer" resultMap="userResultMap">
		select * from bank_manage u where u.user_id = #{userId}
	</select>
	<select id="getUserAndRoleById" parameterType="Integer" resultMap="userAndRoleResultMap">
		select u.user_id,u.username,u.rights as user_rights,
		u.loginname,u.password,u.status,u.manage_no,u.manage_describe,
		r.role_id,r.role_name,r.permissions_category,r.rights as role_rights 
		  from bank_manage u 
		left join bank_role_manage r on u.role_id=r.role_id  
		where  <!-- u.status=0 and -->  u.user_id=#{userId}
	</select>
	
	<select id="getCountByName" parameterType="String" resultType="int">
		select count(user_id) from bank_manage where binary loginname=#{loginname}
	</select>
	<select id="getUserByName" parameterType="String" resultMap="userAndRoleResultMap">
		select user_id,username,loginname from bank_manage where binary loginname=#{loginname};
	</select>
	<insert id="insertUser" parameterType="User" keyProperty="userId">
		insert into bank_manage (loginname,username,password,rights,status,role_id,manage_no,manage_describe,CREATE_ID) 
		values (#{loginname,jdbcType=VARCHAR},#{username,jdbcType=VARCHAR},#{password,jdbcType=VARCHAR},#{rights,jdbcType=VARCHAR},#{status,jdbcType=VARCHAR},#{roleId,jdbcType=NUMERIC},
		#{manageno,jdbcType=VARCHAR},#{managedescribe,jdbcType=VARCHAR},#{createId,jdbcType=NUMERIC})
	</insert>
	<update id="updateUser" parameterType="User">
		update bank_manage set 
		loginname=#{loginname,jdbcType=VARCHAR},
		username=#{username,jdbcType=VARCHAR},
		password=#{password,jdbcType=VARCHAR},
		rights=#{rights,jdbcType=VARCHAR},
		status=#{status,jdbcType=VARCHAR},
		role_id=#{roleId},
		manage_no=#{manageno,jdbcType=VARCHAR}, 
		manage_describe=#{managedescribe,jdbcType=VARCHAR} 
		where user_id=#{userId}
	</update>
		<update id="updateUsers" parameterType="User">
		update bank_manage set 
		loginname=#{loginname,jdbcType=VARCHAR},
		username=#{username,jdbcType=VARCHAR},
		rights=#{rights,jdbcType=VARCHAR},
		status=#{status,jdbcType=VARCHAR},
		role_id=#{roleId,jdbcType=VARCHAR},
		manage_no=#{manageno,jdbcType=VARCHAR}, 
		manage_describe=#{managedescribe,jdbcType=VARCHAR} 
		where user_id=#{userId}
	</update>
	
	
	<update id="updateLastLogin" parameterType="User">
		update bank_manage set last_login=#{lastLogin} where user_id=#{userId}
	</update>
	
	<update id="updateUserBaseInfo" parameterType="User">
		update bank_manage set 
		username=#{username,jdbcType=VARCHAR},
		role_id=#{roleId},
		status=#{status,jdbcType=VARCHAR},
		manage_describe=#{managedescribe,jdbcType=VARCHAR},
		<if test="password!=null and password!=''">
		    password=#{password,jdbcType=VARCHAR} 
		 </if>
		 where user_id=#{userId}
	</update>
	
	<update id="updateUserRights" parameterType="User">
		update bank_manage set rights=#{rights} where user_id=#{userId}
	</update>
	<delete id="deleteUser" parameterType="Integer">
		delete from bank_manage where user_id=#{userId}
	</delete>
</mapper>